function [Y,Xf,Af] = point_ANN(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 04-Sep-2024 18:05:09.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = Qx8 matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = Qx4 matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [8.48940086920475;8.48903100684617;8.48883009625513;8.48875913388702;1.44100831443474;1.92213720275015;2.38494730595555;2.80894013490477];
x1_step1.gain = [0.668980161582574;0.668847750788458;0.668775859780718;0.668750473505393;0.0880766446121432;0.0899761544565989;0.0918853724274769;0.0937093279468373];
x1_step1.ymin = -1;

% Layer 1
b1 = [1.2430055401368966805;0.98632391421347542781;1.0092519044524921323;0.30467025744578574153;0.23985071225662440986;0.66856145035624359174;-0.22525976996921201478;1.0139502823511958862;-1.1679310240830536038;-1.4274072001487025929];
IW1_1 = [-0.25828842806674279231 -0.9700862455376277893 -0.42747521815242423004 -0.33136126646513325289 -0.72085072233762592653 0.66892608952303467262 -0.19167757812262217754 0.67240831825892466433;0.016024628170177784153 -0.74031756717183749839 -0.40699153339966520626 -0.36404728233868960396 0.21014370767281331798 0.34427514594059055453 0.038227899804214843238 -0.226503877332192044;0.1909893526722506174 0.21248993819760950141 -0.63869235108308786142 -0.031606653623057909264 0.30128922788641948616 -0.018467276107686503295 -0.79849285750124199268 0.26081521147494618473;-0.27234998316975617128 -0.1383946914198615763 -0.16721315694858535084 -0.18245043267465604897 -0.37237869178944438264 -0.45235746906401314016 0.03258701075958891219 0.71585433490313221672;-0.34328695115091478751 -0.46616565731528014638 -0.15731236678476442914 -0.055541606768998989796 1.4081945629111385365 0.29861375314567056849 0.10138453390026538892 -1.7704114988190349234;-0.6589137019395248096 -0.26930657183625911211 0.79344916048011782106 0.37550958380533794312 -0.019269909355402077555 0.12584627299250958354 0.43393832206908872218 0.12937621227285056591;-0.26932437129064273895 -0.23414430394018631576 0.47565008317285784045 0.27142354470262008981 -0.012581723166204886177 0.37715405719544847774 0.27079986129846711496 -0.98861861033883402516;0.83197122306744064613 0.064860592864183538864 -1.0897613903506491173 0.034232912904747420102 -0.8102165613064704619 -0.028174265124317830755 -1.1039401494517904201 -0.5460929693511255012;-0.28288232875130814303 -0.61697249852031754713 -1.2139358023340414139 0.0059249229651260719443 -0.0014942705393679819349 -0.74660584080816894126 0.15126315225681635779 0.033327955879017469309;-0.29572576457559390795 -0.03236060613674658637 -0.26532970579511638842 0.33286885168149438208 1.0551453819926011057 1.080745746006234409 -0.32625258401833023836 -0.96390592988365031424];

% Layer 2
b2 = [0.44570868872843716346;0.44518146316768375526;0.83719961194774961122;0.83433323531465219958];
LW2_1 = [-0.14970480854245907243 0.085487137682303135366 -0.50871144334974671697 -0.93996447823984607961 -0.1677213952340858294 -0.42886500159476159677 -0.30296036777983742505 0.0066154004777364983775 -0.256287574123529871 -0.32681905073223666003;-0.43259252361235134288 0.45570628288621434221 -0.53095702091189955762 -0.78647462792700373324 -0.32301086358288211287 -0.44704553535672642006 -0.29776812450989620373 0.015764373886316393469 -0.27094472753473414217 -0.2809901672032922848;0.38820969656395831748 -0.52708301075299057725 -1.0181312398522270879 -0.90457468574462240873 0.6064003072774112324 0.55550239417243341133 -1.4021783596976700181 -0.022814892090254675072 -0.0020375027665010467248 0.54294112600583388506;0.49565493338917443467 -0.68326944877413997581 -0.97440476989339308567 -1.0241119817813812976 0.71478911733003791529 0.54042369999619610521 -1.4276945685856461399 -0.025260069199614740981 -0.00054309383562372963439 0.5290513246574916062];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [0.669184881143612;0.669472739973386;0.08650066650159;0.0847190755734687];
y1_step1.xoffset = [8.48997225300697;8.49077474621392;1.02460205328424;0.534602362246329];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
    X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},1); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    X{1,ts} = X{1,ts}';
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
    Y{1,ts} = Y{1,ts}';
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
    Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
