function [y1] = x_bNeuralNetworkFunction(x1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 21-May-2024 19:27:16.
%
% [y1] = myNeuralNetworkFunction(x1) takes these arguments:
%   x = Qx8 matrix, input #1
% and returns:
%   y = Qx4 matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [7.66;7.63;7.61;7.6;0.509110751376305;0.529475388404188;0.529475388404188;0.529475388404188];
x1_step1.gain = [0.530052451575698;0.515164759134975;0.50511063050116;0.5;0.0850013380894255;0.085074971387339;0.085074971387339;0.085074971387339];
x1_step1.ymin = -1;

% Layer 1
b1 = [1.0909544301294735735;1.2567771060790653426;0.65686237695929994285;-0.27003913065076512456;0.0024876238831859076583;-0.44746493931463676708;0.63189186730219581989;-0.99119807564504935904;-0.052401116481113070578;2.8123378878979092832];
IW1_1 = [0.0937894517327281102 0.75007937406123192936 -0.68654942114253469931 -0.046230152965843415713 0.75056885235069259465 0.53920421809856944328 -1.0167572446698334154 0.10786394595878778802;-1.0532427801111901022 0.10760509429245058988 0.34832883533707331702 0.59267929899904958635 -0.85798997635915641435 0.90587997297826583498 0.13241148653266279767 0.13242764727034003758;-0.40631757188589395779 0.046014117106766734555 0.33326340976689289297 -0.05396090299785530342 -0.90113545897375724181 0.6810615824359255166 -0.44172018564600884494 0.16174887536608506533;0.70226876471786758849 -0.14415643836144104162 -0.54907987690247284096 -0.003931290376946781559 -1.6409661620094757595 0.2170986416403200836 0.092567425973088438007 1.2154874248172047313;-0.64849779539389396099 -0.25562004971277618726 0.5182999444632776509 0.17069754267821671267 0.42015014312114945527 -0.62594395081016551696 -0.32661921993905723705 0.75631113950366757326;-0.59080973308572437563 0.43230547426034404701 -0.52529931175697219814 0.58262598638998708278 0.10793878979451369815 0.20016303371626828489 -0.22576904461297314652 -0.58815327129594607847;-0.079743133500482718534 0.20506364543683858193 0.78624650948074337187 0.10651131525122353727 0.52846935853759835489 -0.18400360423767014861 0.30240115273962997477 -0.76876113565379555759;-0.56960982868149379055 0.32364104953218991723 1.0874111968557531593 0.57125769589378494473 0.75511913300531496862 -0.79158932321889630135 -0.078844808718793846225 -0.047124679025554540301;-0.30318810014692965105 -0.76058554552884860556 0.59505325422062427254 -0.03325963577492173362 -1.754595353179875028 0.15071000691354674572 0.21757255476670256389 1.3900867151243501141;0.096407806979255800117 -0.83594519203470318836 -0.82710315267003753359 0.37212615059448173049 0.5400874266459879669 -0.17380715136141219879 0.62459230884966288055 -1.1351328930200399459];

% Layer 2
b2 = [-0.6271865379727102896;-0.12279610199609122811;-0.17862949976694786347;0.57940188019977723055];
LW2_1 = [0.14583695791525411178 0.91956812092516104773 -0.32573615292311375313 1.3977780054616681937 -0.11158147295898049323 -0.035357724639018199564 0.3331570572064269653 0.26421494724172889246 -1.1069318203893441233 0.2100749153111780565;1.2575712497445850069 -0.5310139431963311063 -0.64997234549236726497 0.57686879956054715191 -1.1852922869918498527 -0.15324833581361552159 0.65596432032269424983 0.36900593530216507787 0.10738440640158540551 -0.083878525890516142383;0.70098960924063558053 0.59293784705884444719 -1.1132804648891263533 -0.25169445105683346808 0.64047754362580466836 -0.70839368901425725511 -0.12809754077144785978 -0.090489458888910218048 -0.24746052840876656131 -0.62527423811243920682;-0.31954005391845347051 0.63283791478755024862 -0.85268331008270803473 0.08338501918889769382 1.2813936070925611155 -0.95993310556291888691 -0.31527191430212397893 -0.17139180701189710154 -0.95144229207313302243 -0.76865127799705124101];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [0.536015585162963;0.543295962747685;0.0848369007308385;0.0846778301441438];
y1_step1.xoffset = [7.7;7.75;0.463504966878767;0.397844131721501];

% ===== SIMULATION ========

% Dimensions
Q = size(x1,1); % samples

% Input 1
x1 = x1';
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
y1 = y1';
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
