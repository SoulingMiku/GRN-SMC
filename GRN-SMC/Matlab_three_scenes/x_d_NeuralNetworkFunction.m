function [y1] = x_d_NeuralNetworkFunction(x1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 21-May-2024 12:38:09.
%
% [y1] = myNeuralNetworkFunction(x1) takes these arguments:
%   x = Qx8 matrix, input #1
% and returns:
%   y = Qx4 matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [8.53446908001251;8.51804890531274;8.50283929448822;8.48875913388702;0.257611080813468;0.295842984570675;0.335712999209087;0.375];
x1_step1.gain = [0.686105463035672;0.679750939887125;0.673985704014424;0.668750473505393;0.0842480751436294;0.0841981017958518;0.0841640923840034;0.0841165543583403];
x1_step1.ymin = -1;

% Layer 1
b1 = [-1.2249919561813564783;-1.7978579681665813883;1.539015149715817099;-0.4775578767642211786;-0.12267576573156850628;-0.27668319843498834221;-1.372149621955505383;0.96040467404641105542;1.0316378361307589895;1.2950169046742219248];
IW1_1 = [0.72199951543985441127 0.15946847969727984129 0.11375149753840409217 0.049354100981538528981 -0.31550567495521725236 -1.1746598477457523835 0.36163580584445947919 1.4629624228010855713;0.78458347177409482054 1.0245732587086369136 -1.0251999407011440635 -0.94033776112475320197 -0.035193109854882692611 0.32782846079178212806 -0.81763716226578186941 -0.26463045358873332757;-0.43759305696034311861 0.093171636437589397395 0.14556889652370411103 0.25025705574979201229 0.079086658165134632315 0.055659008474167527558 0.14671636889483405386 0.54069538479227485794;0.27950997290826073982 0.20676583269435980239 0.19718416126456791981 0.044966033668682237057 -0.053859261958064195974 -0.47420267009767758104 0.008133075921391584584 0.48279686273949956599;0.27362866307373095998 -0.10141150820081792916 -0.029883773134387989212 -0.14936223756986255484 -1.2691841137537480666 -0.61121146791838798507 0.0088541889001826391825 0.85344223456400325478;-0.63372176188714512968 0.1603406215319126138 -0.22340511254215522641 0.031576648203755920685 -0.35207246184604545913 -0.46717546992471858935 -0.21277222723128619286 0.88740794576421333506;-0.24073752428247549573 -0.17045209831114591092 0.25394082783474031251 0.24456275168927937846 -0.68053546989832147673 1.1813407928571597605 -1.1691793320104371112 0.26122106313515708331;0.75646839850568214914 -0.81126450292104401729 0.2453764429162409999 0.081813422970916052646 0.32746755729765930631 1.3830826467789134604 0.0271973708526280257 -2.1531093073418543504;0.004658154016278544772 1.1424127110380186689 0.14979776090608518113 0.20318382947791285842 0.45745206379678066133 0.0044981295505012166766 -0.46389481792123687942 0.10503543521669501948;-0.22134032954440602259 0.61917387334904094853 -0.27791341564872223957 -0.15404591108324600102 -0.65805325286530014228 -0.97501060824669405491 0.57486001812534770483 0.24758133142062527243];

% Layer 2
b2 = [0.13284345152349660846;0.53111031834876376578;-0.4097516925850309133;0.44279983262500699492];
LW2_1 = [0.21215870299276018418 -0.19403508309652861552 -0.10718949239634248394 0.77387279603843772691 0.031024377877528278025 -0.55140968873148821228 0.18235449004117287863 0.18377319764508870392 0.21984780806249387686 0.024896313736669249683;-0.018417555013798193875 0.53690475687189564979 0.54175368706155380139 1.3161642795809225248 -0.054665402646573289791 0.015318588369543939889 0.36928988555368935653 0.42244708233900796213 0.34549262374347877724 -0.23360820623193354062;0.356190365775070239 0.035868797317867018304 0.89535623964696997579 -0.68238587431535435712 -0.37984197754153919968 -0.74698056804744950021 -0.72611300863925409832 -0.79341463226580766221 -0.11819199196621758829 -0.67389493636468644766;0.52942731565579037589 0.42716011524561492418 1.3480726455082190363 -1.0277691553178844863 -0.38614473831895340661 -1.0551421554143212145 0.34473283126693549105 -0.98737877712337451808 -0.17603914572832668473 -0.50753579776532109502];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [0.695986616365907;0.701012770931467;0.0843144602540287;0.0843978023464704];
y1_step1.xoffset = [8.54344378213994;8.55622160133915;0.22092236192194;0.185687660414801];

% ===== SIMULATION ========

% Dimensions
Q = size(x1,1); % samples

% Input 1
x1 = x1';
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
y1 = y1';
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
